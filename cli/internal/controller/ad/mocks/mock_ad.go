// Code generated by MockGen. DO NOT EDIT.
// Source: esad/internal/controller/ad (interfaces: AnomalyDetectorController)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	ad "esad/internal/entity/ad"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAnomalyDetectorController is a mock of AnomalyDetectorController interface
type MockAnomalyDetectorController struct {
	ctrl     *gomock.Controller
	recorder *MockAnomalyDetectorControllerMockRecorder
}

// MockAnomalyDetectorControllerMockRecorder is the mock recorder for MockAnomalyDetectorController
type MockAnomalyDetectorControllerMockRecorder struct {
	mock *MockAnomalyDetectorController
}

// NewMockAnomalyDetectorController creates a new mock instance
func NewMockAnomalyDetectorController(ctrl *gomock.Controller) *MockAnomalyDetectorController {
	mock := &MockAnomalyDetectorController{ctrl: ctrl}
	mock.recorder = &MockAnomalyDetectorControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnomalyDetectorController) EXPECT() *MockAnomalyDetectorControllerMockRecorder {
	return m.recorder
}

// CreateAnomalyDetector mocks base method
func (m *MockAnomalyDetectorController) CreateAnomalyDetector(arg0 context.Context, arg1 ad.CreateDetectorRequest) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnomalyDetector", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnomalyDetector indicates an expected call of CreateAnomalyDetector
func (mr *MockAnomalyDetectorControllerMockRecorder) CreateAnomalyDetector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnomalyDetector", reflect.TypeOf((*MockAnomalyDetectorController)(nil).CreateAnomalyDetector), arg0, arg1)
}

// CreateMultiEntityAnomalyDetector mocks base method
func (m *MockAnomalyDetectorController) CreateMultiEntityAnomalyDetector(arg0 context.Context, arg1 ad.CreateDetectorRequest, arg2, arg3 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiEntityAnomalyDetector", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiEntityAnomalyDetector indicates an expected call of CreateMultiEntityAnomalyDetector
func (mr *MockAnomalyDetectorControllerMockRecorder) CreateMultiEntityAnomalyDetector(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiEntityAnomalyDetector", reflect.TypeOf((*MockAnomalyDetectorController)(nil).CreateMultiEntityAnomalyDetector), arg0, arg1, arg2, arg3)
}

// DeleteDetector mocks base method
func (m *MockAnomalyDetectorController) DeleteDetector(arg0 context.Context, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetector", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDetector indicates an expected call of DeleteDetector
func (mr *MockAnomalyDetectorControllerMockRecorder) DeleteDetector(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetector", reflect.TypeOf((*MockAnomalyDetectorController)(nil).DeleteDetector), arg0, arg1, arg2, arg3)
}

// DeleteDetectorByName mocks base method
func (m *MockAnomalyDetectorController) DeleteDetectorByName(arg0 context.Context, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDetectorByName indicates an expected call of DeleteDetectorByName
func (mr *MockAnomalyDetectorControllerMockRecorder) DeleteDetectorByName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorByName", reflect.TypeOf((*MockAnomalyDetectorController)(nil).DeleteDetectorByName), arg0, arg1, arg2, arg3)
}

// SearchDetectorByName mocks base method
func (m *MockAnomalyDetectorController) SearchDetectorByName(arg0 context.Context, arg1 string) ([]ad.Detector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDetectorByName", arg0, arg1)
	ret0, _ := ret[0].([]ad.Detector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDetectorByName indicates an expected call of SearchDetectorByName
func (mr *MockAnomalyDetectorControllerMockRecorder) SearchDetectorByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDetectorByName", reflect.TypeOf((*MockAnomalyDetectorController)(nil).SearchDetectorByName), arg0, arg1)
}

// StartDetector mocks base method
func (m *MockAnomalyDetectorController) StartDetector(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDetector", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDetector indicates an expected call of StartDetector
func (mr *MockAnomalyDetectorControllerMockRecorder) StartDetector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDetector", reflect.TypeOf((*MockAnomalyDetectorController)(nil).StartDetector), arg0, arg1)
}

// StartDetectorByName mocks base method
func (m *MockAnomalyDetectorController) StartDetectorByName(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDetectorByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDetectorByName indicates an expected call of StartDetectorByName
func (mr *MockAnomalyDetectorControllerMockRecorder) StartDetectorByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDetectorByName", reflect.TypeOf((*MockAnomalyDetectorController)(nil).StartDetectorByName), arg0, arg1, arg2)
}

// StopDetector mocks base method
func (m *MockAnomalyDetectorController) StopDetector(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDetector", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopDetector indicates an expected call of StopDetector
func (mr *MockAnomalyDetectorControllerMockRecorder) StopDetector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDetector", reflect.TypeOf((*MockAnomalyDetectorController)(nil).StopDetector), arg0, arg1)
}

// StopDetectorByName mocks base method
func (m *MockAnomalyDetectorController) StopDetectorByName(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDetectorByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopDetectorByName indicates an expected call of StopDetectorByName
func (mr *MockAnomalyDetectorControllerMockRecorder) StopDetectorByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDetectorByName", reflect.TypeOf((*MockAnomalyDetectorController)(nil).StopDetectorByName), arg0, arg1, arg2)
}
